.CODE	 	 	 	 	 	 	; Código de inicialización
PUSH mt_main$0_A	 	 	 	 	 	 	; Voy a llamar a main
CALL	 	 	 	 	 	 	; Voy al metodo que esta el pila
HALT	 	 	 	 	 	 	; Termina la ejecucion
	 	 	 	 	 	 	
.DATA	 	 	 	 	 	 	; DATOS CLASE A
VT_A: 	 	 	 	 	 	 	; VT de la clase A
NOP	 	 	 	 	 	 	; No hay metodo dinamicos
.CODE	 	 	 	 	 	 	; CODE CLASE A
mt_main$0_A: NOP	 	 	 	 	 	 	; main(0): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RMEM 1	 	 	 	 	 	 	; 
PUSH 2	 	 	 	 	 	 	; Espacio que va a ocupar el objeto
PUSH simple_malloc	 	 	 	 	 	 	; Reservo espacio para el objeto
CALL	 	 	 	 	 	 	; llamo a simple malloc
DUP	 	 	 	 	 	 	; Duplico el this del objeto creado
PUSH VT_B	 	 	 	 	 	 	; apilo la VT de la clase
STOREREF 0	 	 	 	 	 	 	; Guardo la VT
DUP	 	 	 	 	 	 	; 
PUSH ctor_B$0	 	 	 	 	 	 	; Quiero llamar al ctor
CALL	 	 	 	 	 	 	; Llamo al ctor
POP	 	 	 	 	 	 	; si no es void, hay q sacar el retorno
FMEM 0	 	 	 	 	 	 	; Eliminar espacio de variables locales del bloque: etapa4AST.NBloque@15db9742
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 0	 	 	 	 	 	 	; 
ctor_A$0: NOP	 	 	 	 	 	 	; A(0): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
	 	 	 	 	 	 	
.DATA	 	 	 	 	 	 	; DATOS CLASE B
VT_B: 	 	 	 	 	 	 	; VT de la clase B
NOP	 	 	 	 	 	 	; No hay metodo dinamicos
.CODE	 	 	 	 	 	 	; CODE CLASE B
ctor_B$0: NOP	 	 	 	 	 	 	; B(0): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RMEM 1	 	 	 	 	 	 	; Reservar espacio para var local: x, de bloque: etapa4AST.NBloque@6d06d69c
PUSH 10	 	 	 	 	 	 	; Pongo el literal en la pila
STORE 0	 	 	 	 	 	 	; Guardo var local/ param
LOAD 0	 	 	 	 	 	 	; Cargo var local/param
PUSH mt_printI$1_System	 	 	 	 	 	 	; guardo el nombre del metodo a llamar
CALL	 	 	 	 	 	 	; voy al metodo estaticamente
FMEM 1	 	 	 	 	 	 	; Eliminar espacio de variables locales del bloque: etapa4AST.NBloque@6d06d69c
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
	 	 	 	 	 	 	
.DATA	 	 	 	 	 	 	; DATOS CLASE Object
VT_Object: 	 	 	 	 	 	 	; VT de la clase Object
NOP	 	 	 	 	 	 	; No hay metodo dinamicos
.CODE	 	 	 	 	 	 	; CODE CLASE Object
ctor_Object$0: NOP	 	 	 	 	 	 	; Object(0): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
	 	 	 	 	 	 	
.DATA	 	 	 	 	 	 	; DATOS CLASE System
VT_System: 	 	 	 	 	 	 	; VT de la clase System
NOP	 	 	 	 	 	 	; No hay metodo dinamicos
.CODE	 	 	 	 	 	 	; CODE CLASE System
mt_printI$1_System: NOP	 	 	 	 	 	 	; printI(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
IPRINT	 	 	 	 	 	 	; Imprimo un entero
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_println$0_System: NOP	 	 	 	 	 	 	; println(0): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
PRNLN	 	 	 	 	 	 	; Imprimo un salto de linea
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 0	 	 	 	 	 	 	; 
mt_printIln$1_System: NOP	 	 	 	 	 	 	; printIln(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
IPRINT	 	 	 	 	 	 	; Imprimo un entero
PRNLN	 	 	 	 	 	 	; Imprimo un salto de linea
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_read$0_System: NOP	 	 	 	 	 	 	; read(0): int
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
READ	 	 	 	 	 	 	; Pido un entero por pantalla
STORE 3	 	 	 	 	 	 	; Guardo el entero
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 0	 	 	 	 	 	 	; 
mt_printB$1_System: NOP	 	 	 	 	 	 	; printB(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
BPRINT	 	 	 	 	 	 	; Imprimo un boolean
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_printC$1_System: NOP	 	 	 	 	 	 	; printC(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
CPRINT	 	 	 	 	 	 	; Imprimo un char
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_printS$1_System: NOP	 	 	 	 	 	 	; printS(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
SPRINT	 	 	 	 	 	 	; Imprimo un string
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_printCln$1_System: NOP	 	 	 	 	 	 	; printCln(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
CPRINT	 	 	 	 	 	 	; Imprimo un char
PRNLN	 	 	 	 	 	 	; Imprimo un salto de linea
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_printBln$1_System: NOP	 	 	 	 	 	 	; printBln(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
BPRINT	 	 	 	 	 	 	; Imprimo un boolean
PRNLN	 	 	 	 	 	 	; Imprimo un salto de linea
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
mt_printSln$1_System: NOP	 	 	 	 	 	 	; printSln(1): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOAD 3	 	 	 	 	 	 	; Cargo el valor para imprimir
SPRINT	 	 	 	 	 	 	; Imprimo un string
PRNLN	 	 	 	 	 	 	; Imprimo un salto de linea
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
ctor_System$0: NOP	 	 	 	 	 	 	; System(0): void
LOADFP	 	 	 	 	 	 	; Agregado en EntradaConParams
LOADSP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
STOREFP	 	 	 	 	 	 	; Agregado en EntradaConParams
RET 1	 	 	 	 	 	 	; 
	 	 	 	 	 	 	
simple_heap_init:	 	 	 	 	 	 	; 
RET 0	 	 	 	 	 	 	; Retorna inmediatamente
simple_malloc:	 	 	 	 	 	 	; 
LOADFP	 	 	 	 	 	 	; Inicialización unidad
LOADSP	 	 	 	 	 	 	; 
STOREFP	 	 	 	 	 	 	; Finaliza inicialización del RA
LOADHL	 	 	 	 	 	 	; hl
DUP	 	 	 	 	 	 	; hl
PUSH 1	 	 	 	 	 	 	; 1
ADD	 	 	 	 	 	 	; hl+1
STORE 4	 	 	 	 	 	 	; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	 	 	 	 	 	 	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD	 	 	 	 	 	 	; 
STOREHL	 	 	 	 	 	 	; Mueve el heap limit (hl). Expande el heap
STOREFP	 	 	 	 	 	 	; 
RET 1	 	 	 	 	 	 	; Retorna eliminando el parámetro
